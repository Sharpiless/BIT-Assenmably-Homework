.386
.model flat,stdcall
option casemap:none

include msvcrt.inc
includelib		msvcrt.lib
include kernel32.inc
includelib		kernel32.lib
include user32.inc
includelib		user32.lib
include masm32rt.inc
includelib masm32rt.lib

;fopen			PROTO C :dword, :dword
fgets			PROTO C :dword, :dword,:dword
;fclose			PROTO C :dword
sprintf			PROTO C :ptr sbyte, :ptr sbyte, :VARARG

.data
hInstance		dd		?		;应用程序的句柄
hWinMain		dd		?		;窗口的句柄
showButton		byte	'SURE', 0
button			byte	'button', 0
showEdit1		byte	'FILE1:', 0
showEdit2		byte	'FILE2:', 0
edit			byte	'edit', 0
filePath1		byte	256	DUP(?)
filePath2		byte	256	DUP(?)
openWay			byte    'r',	0
diffNum			dd		?
diffOut			byte	2000 DUP(0)
buff1			byte	1024 DUP(0)
buff2			byte	1024 DUP(0)

.const
winClassName	db		'MyClass', 0
winCaptionName	db		'Compare File', 0
winMessage		db		'Input file Path', 0
MAXSIZE			dd		1024
SameContent		db		'there is no different _line between file1 and file2', 0
DiffContent		db		'%d\n'
szBoxTitle		db		'Compare Outcome'
;szText			db		'there is no different _line between file1 and file2', 0

.code
_CompareFile	PROC	USES	eax ebx ecx lpFilePath1: PTR BYTE, lpFilePath2:	PTR BYTE
				LOCAL	fp1		:PTR	SBYTE
				LOCAL	fp2		:PTR	SBYTE
				LOCAL	__line	:DWORD
				LOCAL	diffTem[1000] :BYTE
				LOCAL	p1		:PTR	SBYTE
				LOCAL	p2		:PTR	SBYTE

				;	fp1 = fopen("test1.txt", "r");
				;INVOKE	fopen,	offset	lpFilePath1, OFFSET openWay
				MOV		fp1,	fopen(lpFilePath1)
				;	fp2 = fopen("test2.txt", "r");
				;INVOKE	fopen,	offset	lpFilePath2, OFFSET openWay
				MOV		fp2,	fopen(lpFilePath2)

				MOV		__line,	0
				MOV		diffNum,0

CYCLE:				;   while (true) {
				XOR		ebx,	ebx
				CMP		ebx,	1
				JE		_CLOSE

				MOV		[diffTem],	0
				INC		__line
				INVOKE	RtlZeroMemory,		addr	buff1,	SIZEOF	MAXSIZE		;
				INVOKE	RtlZeroMemory,		addr	buff1,	SIZEOF	MAXSIZE		;
				;	char* p1 = fgets(buff1, MAXSIZE, fp1);
				invoke	fgets,	ADDR	buff1,	offset	MAXSIZE,	ADDR	fp1
				MOV		p1,		eax
				;	char* p2 = fgets(buff2, MAXSIZE, fp2);
				INVOKE	fgets,	ADDR	buff2,	offset	MAXSIZE,	ADDR	fp2
				MOV		p2,		eax

L1:				;	if (p1 == NULL) {
				CMP		p1,		0
				JNE		CYCLE
				;		if (p2 == NULL) {
				CMP		p2,		0
							;break
				JNE		_CLOSE

				INVOKE	sprintf,	ADDR diffTem,	OFFSET	DiffContent,	__line
				INVOKE	lstrcat,	ADDR diffOut,	ADDR	diffTem
				INC		diffNum
				JMP		CYCLE

L2:				;	else {
				;		if (p2 == NULL) {
				CMP		p2,		0
				JNE		L21
L20:
				INVOKE	sprintf,	ADDR diffTem,	OFFSET	DiffContent,	__line
				INVOKE	lstrcat,	ADDR diffOut,	ADDR	diffTem
				INC		diffNum
				JMP		CYCLE
L21:			;else {
				;	int ans = strcmp(buff1, buff2);
				INVOKE	lstrcmp,	OFFSET	buff1,	OFFSET	buff2
				;				if (ans != 0) {
				CMP		eax,	0
				JE		CYCLE

				INVOKE	sprintf,	ADDR diffTem,	OFFSET	DiffContent,	__line
				INVOKE	lstrcat,	ADDR diffOut,	ADDR	diffTem
				INC		diffNum
				JMP		CYCLE

_CLOSE:
				;INVOKE	fclose,	OFFSET	fp1
				fclose	fp1
				fclose	fp2
				;INVOKE	fclose,	OFFSET	fp2
				XOR		eax,	eax
				RET
_CompareFile	ENDP


_ProcWinMain	PROC	USES ebx edi esi, hWnd, uMsg, wParam, lParam   ;窗口过程
				LOCAL	structPs:		PAINTSTRUCT
				LOCAL	structRect:	RECT
				LOCAL	hDc

				MOV		eax,	uMsg

				.IF		eax==WM_PAINT		
						INVOKE			BeginPaint, hWnd,	addr structPs
						MOV				hDc,		eax
						INVOKE			EndPaint,	hWnd,	addr structPs
				
				.ELSEIF	eax==WM_CLOSE   ;窗口关闭信息
						INVOKE			DestroyWindow, hWinMain
						INVOKE			PostQuitMessage, NULL

				.ELSEIF	eax==WM_CREATE    ;创建窗口
						;invoke			CreateWindowEx,NULL,offset button,offset showButton,\
												;WS_CHILD or WS_VISIBLE,10,10,200,30,\  ;10，10，200，30代表按钮尺寸大小和坐标等。。。
												;hWnd,1,hInstance,NULL  ;1表示该按钮的句柄是1
						INVOKE			CreateWindowEx,	NULL, OFFSET edit, OFFSET showEdit1,\
														WS_CHILD OR  WS_VISIBLE,	10, 10, 350, 35,\
														hWnd,	1,		hInstance,	NULL   
														
						INVOKE			CreateWindowEx,	NULL, OFFSET edit, OFFSET showEdit2,\
														WS_CHILD OR  WS_VISIBLE,	10, 50, 350, 35,\
														hWnd,	2,		hInstance,	NULL 

						INVOKE			CreateWindowEx,	NULL, OFFSET button, OFFSET showButton,\
														WS_CHILD OR  WS_VISIBLE,	220, 100, 200, 45,\
														hWnd,	3,		hInstance,	NULL    
						

				.ELSEIF	eax==WM_COMMAND
						mov eax,wParam  ;其中参数wParam里存的是句柄，如果点击了一个按钮，则wParam是那个按钮的句柄
						.IF	eax ==3
							INVOKE			SetDlgItemText,	hWnd, 1, OFFSET filePath1
							INVOKE			SetDlgItemText,	hWnd, 2, OFFSET filePath2
							MOV				eax,		wParam
							INVOKE			_CompareFile,	offset	filePath1,	OFFSET filePath2
							.IF	diffNum == 0
								INVOKE		MessageBox,	hWnd,	OFFSET SameContent,	OFFSET szBoxTitle,	MB_OK + MB_ICONQUESTION
							.ELSE
								;输出不同的行数
								INVOKE		MessageBox,	hWnd,	OFFSET diffOut,	OFFSET szBoxTitle,	MB_OK + MB_ICONQUESTION
							.ENDIF
						.ENDIF



				.ELSE   
						INVOKE			DefWindowProc, hWnd, uMsg, wParam, lParam
						RET
				.ENDIF

				XOR		eax,			eax
				RET
_ProcWinMain	ENDP


_WinMain		PROC
				LOCAL	structWndClass:	WNDCLASSEX	;定义一个WNDCLASSEX类型的结构变量
				LOCAL	structMsg:			MSG		;定义一个MSG类型变量，用于消息传递
				
				INVOKE	GetModuleHandle,	NULL	;得到应用程序的句柄
				MOV		hInstance,			eax
				
				INVOKE	RtlZeroMemory,		addr		structWndClass,		sizeof	structWndClass		;将structWndClaa初始化为零
				INVOKE	LoadCursor,			0,			IDC_ARROW
				MOV		structWndClass.hCursor,		eax
				push	hInstance
				pop		structWndClass.hInstance

